# Event Horizon - Pre-commit Configuration
# This file is used to configure the pre-commit hooks for the project. Every time we create a commit message,
# the hooks will run and check the code for any issues. If there are any issues, the commit will be rejected.
# ==========================================

repos:
  # Python code formatting
  - repo: https://github.com/psf/black
    rev: 24.3.0
    hooks:
      - id: black
        language_version: python3
        args: [--line-length=88]

  # Import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: ["--profile", "black"]

  # Python linting
  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        args: [--max-line-length=88, --extend-ignore=E203,W503]

  # Security checks
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-r, ., -f, json, -o, bandit-report.json]
        exclude: ^tests/|^djvenv/

  # General file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-added-large-files
        args: ['--maxkb=500']
      - id: check-case-conflict
      - id: check-merge-conflict
      - id: debug-statements
      - id: check-json

  # Django-specific checks
  - repo: https://github.com/adamchainz/django-upgrade
    rev: 1.16.0
    hooks:
      - id: django-upgrade
        args: [--target-version, "5.1"]

  # JavaScript/CSS formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.1.0
    hooks:
      - id: prettier
        files: \.(js|jsx|ts|tsx|css|scss|html|json|md)$
        exclude: ^staticfiles/|^djvenv/

  # Environment file security check
  - repo: local
    hooks:
      - id: check-env-security
        name: Check .env for exposed secrets
        entry: python
        language: system
        args:
          - -c
          - |
            import re
            import sys
            
            patterns = [
                r'SECRET_KEY.*=.*django-insecure',
                r'DEBUG.*=.*True',
            ]
            
            try:
                with open('.env', 'r') as f:
                    content = f.read()
                    for pattern in patterns:
                        if re.search(pattern, content, re.IGNORECASE):
                            print(f"WARNING: Potentially insecure configuration detected in .env")
                            sys.exit(1)
            except FileNotFoundError:
                pass
        files: \.env$
        always_run: false