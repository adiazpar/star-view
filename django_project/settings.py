"""
Django settings for django_project project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
import certifi
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file:
load_dotenv()

# Use environment variables for sensitive data:
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')
MAPBOX_TOKEN = os.getenv('MAPBOX_TOKEN')
SENDGRID_API_KEY = os.getenv('SENDGRID_API_KEY')

# Tile Server Configuration
TILE_SERVER_URL = os.getenv('TILE_SERVER_URL', 'http://localhost:3001')

DEBUG = os.getenv('DEBUG', 'False') == 'True'
DISABLE_EXTERNAL_APIS = False

# Allow hosts and trusted origins:
ALLOWED_HOSTS = ['app-adiazpar-5.devedu.io', 'app-dbolding-5.devedu.io', 'app-jcuthber-5.devedu.io', 'app-otinoco-5.devedu.io', '127.0.0.1', 'nyx.local', 'localhost']
CSRF_TRUSTED_ORIGINS = ['https://app-adiazpar-5.devedu.io', 'https://app-dbolding-5.devedu.io', 'https://app-otinoco-5.devedu.io']

# Email Configuration:
SITE_ID = 1
SITE_NAME = "Event Horizon"
DOMAIN = "127.0.0.1:8000"
EMAIL_DEBUG = True

os.environ['REQUESTS_CA_BUNDLE'] = certifi.where()
os.environ['SSL_CERT_FILE'] = certifi.where()

EMAIL_BACKEND = 'sendgrid_backend.SendgridBackend'
SENDGRID_SANDBOX_MODE_IN_DEBUG = False  # Set to True to test without actually sending
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'eventhorizonnotifications@gmail.com')

# Add these debug settings:
SENDGRID_TRACK_EMAIL_OPENS = True
SENDGRID_TRACK_CLICKS = True

# Application definition:
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'stars_app',
    'rest_framework',
    'django.contrib.sites',
    'django_crontab',
]

# Debug logging:
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
        'file': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': 'debug.log',  # This will create a debug.log file in your project directory
        },
    },
    'loggers': {
        'stars_app': {  # Replace with your app name
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'django.security': {
            'handlers': ['file'],
            'level': 'WARNING',
            'propagate': True,
        },
    },
}

# Automated commands and cronjobs
CRONJOBS = [
    # HERE ARE A SUITE OF CRONJOB COMMANDS TO USE:
    # python3 manage.py crontab show        -- Show all cronjobs
    # python3 manage.py crontab add         -- Add all cronjobs
    # python3 manage.py crontab remove      -- Remove all cronjobs

    # Run every hour between 6 PM and 6 AM
    ('0 18-23,0-5 * * *', 'django.core.management.call_command', ['update_moon_conditions']),

    # Run once at noon for basic updates
    ('0 12 * * *', 'django.core.management.call_command', ['update_moon_conditions']),
]

# Middleware
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

ROOT_URLCONF = 'django_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
        'TEST': {
            'NAME': ':memory:'
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
TILES_DIR = os.path.join(MEDIA_ROOT, 'tiles')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_REDIRECT_URL = '/'

# Default profile picture
DEFAULT_PROFILE_PICTURE = os.path.join(MEDIA_URL, 'profile_pics/default_profile_pic.jpg')
