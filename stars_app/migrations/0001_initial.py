# Generated by Django 5.1.3 on 2025-06-14 07:13

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Forecast",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("createTime", models.DateTimeField(auto_now=True)),
                ("forecast", models.JSONField(default=list, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="CelestialEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("latitude", models.FloatField()),
                ("longitude", models.FloatField()),
                (
                    "elevation",
                    models.FloatField(default=0, help_text="Elevation in meters"),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("METEOR", "Meteor Shower"),
                            ("ECLIPSE", "Eclipse"),
                            ("PLANET", "Planetary Event"),
                            ("AURORA", "Aurora"),
                            ("OTHER", "Other"),
                            ("COMET", "Comet"),
                        ],
                        max_length=10,
                    ),
                ),
                ("description", models.TextField()),
                ("start_time", models.DateTimeField()),
                ("end_time", models.DateTimeField()),
                (
                    "viewing_radius",
                    models.FloatField(help_text="Optimal viewing radius in km"),
                ),
            ],
            options={
                "ordering": ["start_time"],
                "indexes": [
                    models.Index(fields=["event_type"], name="event_type_idx"),
                    models.Index(fields=["start_time"], name="start_time_idx"),
                    models.Index(fields=["end_time"], name="end_time_idx"),
                    models.Index(
                        fields=["latitude", "longitude"], name="event_coords_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="LocationReview",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "rating",
                    models.IntegerField(
                        help_text="Rating from 1 to 5 stars",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "comment",
                    models.TextField(
                        blank=True,
                        help_text="Optional review comment",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="location_reviews",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ReviewComment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "content",
                    models.TextField(help_text="Comment content", max_length=500),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "review",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to="stars_app.locationreview",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="review_comments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "profile_picture",
                    models.ImageField(blank=True, null=True, upload_to="profile_pics/"),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ViewingLocation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("latitude", models.FloatField()),
                ("longitude", models.FloatField()),
                (
                    "elevation",
                    models.FloatField(default=0, help_text="Elevation in meters"),
                ),
                ("rating_count", models.PositiveIntegerField(default=0)),
                (
                    "average_rating",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="Average rating (0.00-5.00)",
                        max_digits=3,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "formatted_address",
                    models.CharField(
                        blank=True,
                        help_text="Full formatted address from geocoding or user input",
                        max_length=500,
                        null=True,
                    ),
                ),
                (
                    "administrative_area",
                    models.CharField(
                        blank=True,
                        help_text="State/Province/Region",
                        max_length=200,
                        null=True,
                    ),
                ),
                (
                    "locality",
                    models.CharField(
                        blank=True, help_text="City/Town", max_length=200, null=True
                    ),
                ),
                ("country", models.CharField(blank=True, max_length=200, null=True)),
                ("cloudCoverPercentage", models.FloatField(null=True)),
                (
                    "light_pollution_value",
                    models.FloatField(
                        blank=True,
                        help_text="Light pollution in magnitude per square arcsecond (higher values = darker skies)",
                        null=True,
                    ),
                ),
                (
                    "quality_score",
                    models.FloatField(
                        blank=True,
                        help_text="Overall viewing quality score (0-100) based on light pollution and elevation",
                        null=True,
                    ),
                ),
                (
                    "moon_phase",
                    models.FloatField(
                        blank=True,
                        help_text="Current moon phase percentage (0-100)",
                        null=True,
                    ),
                ),
                (
                    "moon_altitude",
                    models.FloatField(
                        blank=True,
                        help_text="Moon's altitude above horizon in degrees",
                        null=True,
                    ),
                ),
                (
                    "moon_impact_score",
                    models.FloatField(
                        blank=True,
                        help_text="Score indicating moon's impact on viewing conditions (0-1)",
                        null=True,
                    ),
                ),
                ("next_moonrise", models.DateTimeField(blank=True, null=True)),
                ("next_moonset", models.DateTimeField(blank=True, null=True)),
                ("next_astronomical_dawn", models.DateTimeField(blank=True, null=True)),
                ("next_astronomical_dusk", models.DateTimeField(blank=True, null=True)),
                (
                    "added_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "forecast",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="stars_app.forecast",
                    ),
                ),
            ],
            options={
                "ordering": ["-quality_score", "-created_at"],
            },
        ),
        migrations.AddField(
            model_name="locationreview",
            name="location",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="reviews",
                to="stars_app.viewinglocation",
            ),
        ),
        migrations.CreateModel(
            name="FavoriteLocation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nickname", models.CharField(blank=True, max_length=50, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="favorite_locations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="favorited_by",
                        to="stars_app.viewinglocation",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ReviewVote",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "is_upvote",
                    models.BooleanField(
                        help_text="True for upvote, False for downvote"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "review",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="votes",
                        to="stars_app.locationreview",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="review_votes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("user", "review")},
            },
        ),
        migrations.AddIndex(
            model_name="viewinglocation",
            index=models.Index(
                fields=["latitude", "longitude"], name="location_coords_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="viewinglocation",
            index=models.Index(fields=["quality_score"], name="quality_score_idx"),
        ),
        migrations.AddIndex(
            model_name="viewinglocation",
            index=models.Index(
                fields=["light_pollution_value"], name="light_pollution_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="viewinglocation",
            index=models.Index(fields=["country"], name="country_idx"),
        ),
        migrations.AddIndex(
            model_name="viewinglocation",
            index=models.Index(fields=["created_at"], name="created_at_idx"),
        ),
        migrations.AddIndex(
            model_name="viewinglocation",
            index=models.Index(fields=["added_by"], name="added_by_idx"),
        ),
        migrations.AddIndex(
            model_name="locationreview",
            index=models.Index(fields=["rating"], name="review_rating_idx"),
        ),
        migrations.AddIndex(
            model_name="locationreview",
            index=models.Index(fields=["created_at"], name="review_created_idx"),
        ),
        migrations.AddIndex(
            model_name="locationreview",
            index=models.Index(fields=["location"], name="review_location_idx"),
        ),
        migrations.AddIndex(
            model_name="locationreview",
            index=models.Index(fields=["user"], name="review_user_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="locationreview",
            unique_together={("user", "location")},
        ),
        migrations.AlterUniqueTogether(
            name="favoritelocation",
            unique_together={("user", "location")},
        ),
    ]
