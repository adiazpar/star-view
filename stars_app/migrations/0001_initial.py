# Generated by Django 5.1.3 on 2025-10-16 21:46

import django.core.validators
import django.db.models.deletion
import stars_app.models.model_review_photo
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="LocationReview",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "rating",
                    models.IntegerField(
                        help_text="Rating from 1 to 5 stars",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "comment",
                    models.TextField(
                        blank=True,
                        help_text="Optional review comment",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="location_reviews",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ReviewComment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "content",
                    models.TextField(help_text="Comment content", max_length=500),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "review",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to="stars_app.locationreview",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="review_comments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "profile_picture",
                    models.ImageField(blank=True, null=True, upload_to="profile_pics/"),
                ),
                (
                    "reputation_score",
                    models.IntegerField(
                        default=0,
                        help_text="User's reputation score based on contributions",
                    ),
                ),
                (
                    "verified_locations_count",
                    models.IntegerField(
                        default=0, help_text="Number of locations verified by this user"
                    ),
                ),
                (
                    "helpful_reviews_count",
                    models.IntegerField(
                        default=0,
                        help_text="Number of helpful reviews (based on votes)",
                    ),
                ),
                (
                    "quality_photos_count",
                    models.IntegerField(
                        default=0, help_text="Number of approved photos uploaded"
                    ),
                ),
                (
                    "is_trusted_contributor",
                    models.BooleanField(
                        default=False, help_text="Whether user is a trusted contributor"
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ViewingLocation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("latitude", models.FloatField()),
                ("longitude", models.FloatField()),
                (
                    "elevation",
                    models.FloatField(default=0, help_text="Elevation in meters"),
                ),
                ("rating_count", models.PositiveIntegerField(default=0)),
                (
                    "average_rating",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="Average rating (0.00-5.00)",
                        max_digits=3,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "formatted_address",
                    models.CharField(
                        blank=True,
                        help_text="Full formatted address from geocoding or user input",
                        max_length=500,
                        null=True,
                    ),
                ),
                (
                    "administrative_area",
                    models.CharField(
                        blank=True,
                        help_text="State/Province/Region",
                        max_length=200,
                        null=True,
                    ),
                ),
                (
                    "locality",
                    models.CharField(
                        blank=True, help_text="City/Town", max_length=200, null=True
                    ),
                ),
                ("country", models.CharField(blank=True, max_length=200, null=True)),
                (
                    "quality_score",
                    models.FloatField(
                        blank=True,
                        help_text="Overall viewing quality score (0-100) based on elevation",
                        null=True,
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this location has been verified",
                    ),
                ),
                (
                    "verification_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the location was verified",
                        null=True,
                    ),
                ),
                (
                    "verification_notes",
                    models.TextField(
                        blank=True, help_text="Notes about the verification process"
                    ),
                ),
                (
                    "times_reported",
                    models.IntegerField(
                        default=0,
                        help_text="Number of times this location has been reported",
                    ),
                ),
                (
                    "last_visited",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last time someone reported visiting this location",
                        null=True,
                    ),
                ),
                (
                    "visitor_count",
                    models.IntegerField(
                        default=0,
                        help_text="Number of unique visitors who have reviewed this location",
                    ),
                ),
                (
                    "added_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "verified_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who verified this location",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="verified_locations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-quality_score", "-created_at"],
            },
        ),
        migrations.AddField(
            model_name="locationreview",
            name="location",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="reviews",
                to="stars_app.viewinglocation",
            ),
        ),
        migrations.CreateModel(
            name="LocationReport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "report_type",
                    models.CharField(
                        choices=[
                            ("DUPLICATE", "Duplicate Location"),
                            ("INACCURATE", "Inaccurate Information"),
                            ("SPAM", "Spam or Inappropriate"),
                            ("CLOSED", "Location Closed/Inaccessible"),
                            ("DANGEROUS", "Safety Concerns"),
                            ("OTHER", "Other"),
                        ],
                        help_text="Type of report",
                        max_length=20,
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="Detailed description of the issue"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending Review"),
                            ("REVIEWED", "Reviewed"),
                            ("RESOLVED", "Resolved"),
                            ("DISMISSED", "Dismissed"),
                        ],
                        default="PENDING",
                        help_text="Current status of the report",
                        max_length=20,
                    ),
                ),
                (
                    "review_notes",
                    models.TextField(
                        blank=True, help_text="Notes from the moderator review"
                    ),
                ),
                (
                    "reviewed_at",
                    models.DateTimeField(
                        blank=True, help_text="When the report was reviewed", null=True
                    ),
                ),
                (
                    "reported_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="location_reports",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "reviewed_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="Moderator who reviewed this report",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reviewed_reports",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "duplicate_of",
                    models.ForeignKey(
                        blank=True,
                        help_text="If duplicate, which location is this a duplicate of",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="duplicate_reports",
                        to="stars_app.viewinglocation",
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reports",
                        to="stars_app.viewinglocation",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="FavoriteLocation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nickname", models.CharField(blank=True, max_length=50, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="favorite_locations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="favorited_by",
                        to="stars_app.viewinglocation",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CommentVote",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "is_upvote",
                    models.BooleanField(
                        help_text="True for upvote, False for downvote"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comment_votes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "comment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="votes",
                        to="stars_app.reviewcomment",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "unique_together": {("user", "comment")},
            },
        ),
        migrations.CreateModel(
            name="CommentReport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "report_type",
                    models.CharField(
                        choices=[
                            ("SPAM", "Spam or Low Quality"),
                            ("HARASSMENT", "Harassment or Bullying"),
                            ("INAPPROPRIATE", "Inappropriate Content"),
                            ("MISINFORMATION", "False or Misleading Information"),
                            ("OTHER", "Other"),
                        ],
                        default="OTHER",
                        help_text="Type of report",
                        max_length=20,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Optional detailed description of the issue",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending Review"),
                            ("REVIEWED", "Reviewed"),
                            ("RESOLVED", "Resolved"),
                            ("DISMISSED", "Dismissed"),
                        ],
                        default="PENDING",
                        help_text="Current status of the report",
                        max_length=20,
                    ),
                ),
                (
                    "review_notes",
                    models.TextField(
                        blank=True, help_text="Notes from the moderator review"
                    ),
                ),
                (
                    "reviewed_at",
                    models.DateTimeField(
                        blank=True, help_text="When the report was reviewed", null=True
                    ),
                ),
                (
                    "reported_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comment_reports",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "reviewed_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="Moderator who reviewed this report",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reviewed_comment_reports",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "comment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reports",
                        to="stars_app.reviewcomment",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["comment", "status"],
                        name="stars_app_c_comment_cd4a69_idx",
                    ),
                    models.Index(
                        fields=["reported_by", "-created_at"],
                        name="stars_app_c_reporte_5075a5_idx",
                    ),
                    models.Index(
                        fields=["status", "-created_at"],
                        name="stars_app_c_status_a8154f_idx",
                    ),
                    models.Index(
                        fields=["report_type", "-created_at"],
                        name="stars_app_c_report__20754e_idx",
                    ),
                ],
                "unique_together": {("comment", "reported_by")},
            },
        ),
        migrations.CreateModel(
            name="ReviewPhoto",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "image",
                    models.ImageField(
                        help_text="Photo for the review",
                        upload_to=stars_app.models.model_review_photo.review_photo_path,
                    ),
                ),
                (
                    "thumbnail",
                    models.ImageField(
                        blank=True,
                        help_text="Thumbnail version of the photo",
                        null=True,
                        upload_to=stars_app.models.model_review_photo.review_thumbnail_path,
                    ),
                ),
                (
                    "caption",
                    models.CharField(
                        blank=True,
                        help_text="Optional caption for the photo",
                        max_length=255,
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Order of display (lower numbers appear first)",
                    ),
                ),
                (
                    "review",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="photos",
                        to="stars_app.locationreview",
                    ),
                ),
            ],
            options={
                "ordering": ["order", "created_at"],
                "indexes": [
                    models.Index(
                        fields=["review", "order"],
                        name="stars_app_r_review__a0dcdf_idx",
                    ),
                    models.Index(
                        fields=["created_at"], name="stars_app_r_created_3de159_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="ReviewReport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "report_type",
                    models.CharField(
                        choices=[
                            ("SPAM", "Spam or Low Quality"),
                            ("HARASSMENT", "Harassment or Bullying"),
                            ("INAPPROPRIATE", "Inappropriate Content"),
                            ("MISINFORMATION", "False or Misleading Information"),
                            ("OTHER", "Other"),
                        ],
                        default="OTHER",
                        help_text="Type of report",
                        max_length=20,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Optional detailed description of the issue",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending Review"),
                            ("REVIEWED", "Reviewed"),
                            ("RESOLVED", "Resolved"),
                            ("DISMISSED", "Dismissed"),
                        ],
                        default="PENDING",
                        help_text="Current status of the report",
                        max_length=20,
                    ),
                ),
                (
                    "review_notes",
                    models.TextField(
                        blank=True, help_text="Notes from the moderator review"
                    ),
                ),
                (
                    "reviewed_at",
                    models.DateTimeField(
                        blank=True, help_text="When the report was reviewed", null=True
                    ),
                ),
                (
                    "reported_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="review_reports",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "review",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reports",
                        to="stars_app.locationreview",
                    ),
                ),
                (
                    "reviewed_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="Moderator who reviewed this report",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reviewed_review_reports",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["review", "status"],
                        name="stars_app_r_review__005246_idx",
                    ),
                    models.Index(
                        fields=["reported_by", "-created_at"],
                        name="stars_app_r_reporte_087d6d_idx",
                    ),
                    models.Index(
                        fields=["status", "-created_at"],
                        name="stars_app_r_status_5f6d89_idx",
                    ),
                    models.Index(
                        fields=["report_type", "-created_at"],
                        name="stars_app_r_report__30aefe_idx",
                    ),
                ],
                "unique_together": {("review", "reported_by")},
            },
        ),
        migrations.CreateModel(
            name="ReviewVote",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "is_upvote",
                    models.BooleanField(
                        help_text="True for upvote, False for downvote"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "review",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="votes",
                        to="stars_app.locationreview",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="review_votes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("user", "review")},
            },
        ),
        migrations.AddIndex(
            model_name="viewinglocation",
            index=models.Index(
                fields=["latitude", "longitude"], name="location_coords_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="viewinglocation",
            index=models.Index(fields=["quality_score"], name="quality_score_idx"),
        ),
        migrations.AddIndex(
            model_name="viewinglocation",
            index=models.Index(fields=["country"], name="country_idx"),
        ),
        migrations.AddIndex(
            model_name="viewinglocation",
            index=models.Index(fields=["created_at"], name="created_at_idx"),
        ),
        migrations.AddIndex(
            model_name="viewinglocation",
            index=models.Index(fields=["added_by"], name="added_by_idx"),
        ),
        migrations.AddIndex(
            model_name="locationreview",
            index=models.Index(fields=["rating"], name="review_rating_idx"),
        ),
        migrations.AddIndex(
            model_name="locationreview",
            index=models.Index(fields=["created_at"], name="review_created_idx"),
        ),
        migrations.AddIndex(
            model_name="locationreview",
            index=models.Index(fields=["location"], name="review_location_idx"),
        ),
        migrations.AddIndex(
            model_name="locationreview",
            index=models.Index(fields=["user"], name="review_user_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="locationreview",
            unique_together={("user", "location")},
        ),
        migrations.AddIndex(
            model_name="locationreport",
            index=models.Index(
                fields=["location", "status"], name="stars_app_l_locatio_e0ce8e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="locationreport",
            index=models.Index(
                fields=["reported_by", "-created_at"],
                name="stars_app_l_reporte_f081c9_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="locationreport",
            index=models.Index(
                fields=["status", "-created_at"], name="stars_app_l_status_ce0079_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="locationreport",
            unique_together={("location", "reported_by", "report_type")},
        ),
        migrations.AlterUniqueTogether(
            name="favoritelocation",
            unique_together={("user", "location")},
        ),
    ]
