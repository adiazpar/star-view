# Generated by Django 5.1.13 on 2025-10-29 07:35

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import starview_app.models.model_review_photo
import starview_app.utils.validators
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('latitude', models.FloatField(validators=[starview_app.utils.validators.validate_latitude])),
                ('longitude', models.FloatField(validators=[starview_app.utils.validators.validate_longitude])),
                ('elevation', models.FloatField(default=0, help_text='Elevation in meters', validators=[starview_app.utils.validators.validate_elevation])),
                ('formatted_address', models.CharField(blank=True, help_text='Full formatted address from geocoding', max_length=500, null=True)),
                ('administrative_area', models.CharField(blank=True, help_text='State/Province/Region', max_length=200, null=True)),
                ('locality', models.CharField(blank=True, help_text='City/Town', max_length=200, null=True)),
                ('country', models.CharField(blank=True, max_length=200, null=True)),
                ('rating_count', models.PositiveIntegerField(default=0)),
                ('average_rating', models.DecimalField(decimal_places=2, default=0.0, help_text='Average rating (0.00-5.00)', max_digits=3)),
                ('is_verified', models.BooleanField(default=False, help_text='Whether this location has been verified by staff')),
                ('verification_date', models.DateTimeField(blank=True, help_text='When the location was verified', null=True)),
                ('verification_notes', models.TextField(blank=True, help_text='Staff notes about the verification process')),
                ('times_reported', models.IntegerField(default=0, help_text='Number of times this location has been reported')),
                ('last_visited', models.DateTimeField(blank=True, help_text='Last time someone reported visiting this location', null=True)),
                ('visitor_count', models.IntegerField(default=0, help_text='Number of unique visitors who have reviewed this location')),
                ('added_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(blank=True, help_text='Staff member who verified this location', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_locations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='FavoriteLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nickname', models.CharField(blank=True, max_length=50, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorite_locations', to=settings.AUTH_USER_MODEL)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorited_by', to='starview_app.location')),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('object_id', models.PositiveIntegerField(help_text='ID of the specific object being reported')),
                ('report_type', models.CharField(choices=[('SPAM', 'Spam or Low Quality'), ('HARASSMENT', 'Harassment or Bullying'), ('INAPPROPRIATE', 'Inappropriate Content'), ('MISINFORMATION', 'False or Misleading Information'), ('DUPLICATE', 'Duplicate Location'), ('INACCURATE', 'Inaccurate Information'), ('CLOSED', 'Location Closed/Inaccessible'), ('DANGEROUS', 'Safety Concerns'), ('OTHER', 'Other')], help_text='Type/reason for this report', max_length=20)),
                ('description', models.TextField(blank=True, help_text='Detailed description of the issue')),
                ('status', models.CharField(choices=[('PENDING', 'Pending Review'), ('REVIEWED', 'Reviewed'), ('RESOLVED', 'Resolved'), ('DISMISSED', 'Dismissed')], default='PENDING', help_text='Current status in moderation workflow', max_length=20)),
                ('additional_data', models.JSONField(blank=True, default=dict, help_text='Optional JSON for additional context', null=True)),
                ('review_notes', models.TextField(blank=True, help_text='Internal moderator notes')),
                ('reviewed_at', models.DateTimeField(blank=True, help_text='When this report was reviewed', null=True)),
                ('content_type', models.ForeignKey(help_text='Type of object being reported', on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('reported_by', models.ForeignKey(help_text='User who submitted this report', on_delete=django.db.models.deletion.CASCADE, related_name='submitted_reports', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by', models.ForeignKey(blank=True, help_text='Moderator who reviewed this report', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_reports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('rating', models.IntegerField(help_text='Rating from 1 to 5 stars', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comment', models.TextField(blank=True, help_text='Optional review comment', max_length=1000, null=True)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='starview_app.location')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='location_reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReviewComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('content', models.TextField(help_text='Comment content', max_length=500)),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='starview_app.review')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_comments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReviewPhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('image', models.ImageField(help_text='Photo for the review', upload_to=starview_app.models.model_review_photo.review_photo_path)),
                ('thumbnail', models.ImageField(blank=True, help_text='Thumbnail version of the photo', null=True, upload_to=starview_app.models.model_review_photo.review_thumbnail_path)),
                ('caption', models.CharField(blank=True, help_text='Optional caption for the photo', max_length=255)),
                ('order', models.PositiveIntegerField(default=0, help_text='Order of display (lower numbers appear first)')),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='starview_app.review')),
            ],
            options={
                'ordering': ['order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pics/')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('object_id', models.PositiveIntegerField(help_text='The ID of the specific object being voted on')),
                ('is_upvote', models.BooleanField(help_text='True for upvote, False for downvote')),
                ('content_type', models.ForeignKey(help_text='The type of object being voted on (e.g., Review, ReviewComment, etc.)', on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(help_text='The user who cast this vote', on_delete=django.db.models.deletion.CASCADE, related_name='votes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('login_success', 'Login Success'), ('login_failed', 'Login Failed'), ('login_locked', 'Login Locked (Account Lockout)'), ('logout', 'Logout'), ('registration_success', 'Registration Success'), ('registration_failed', 'Registration Failed'), ('password_reset_requested', 'Password Reset Requested'), ('password_changed', 'Password Changed'), ('location_verified', 'Location Verified'), ('location_unverified', 'Location Unverified'), ('content_moderated', 'Content Moderated'), ('permission_denied', 'Permission Denied'), ('access_forbidden', 'Access Forbidden')], db_index=True, help_text='Type of security event', max_length=50)),
                ('timestamp', models.DateTimeField(db_index=True, default=django.utils.timezone.now, help_text='When the event occurred')),
                ('success', models.BooleanField(default=True, help_text='Whether the action succeeded or failed')),
                ('message', models.TextField(help_text='Human-readable description of the event')),
                ('username', models.CharField(blank=True, db_index=True, help_text="Username attempted (for failed logins when user doesn't exist)", max_length=150)),
                ('ip_address', models.GenericIPAddressField(blank=True, db_index=True, help_text='IP address where the request originated', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='Browser/client user agent string')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional event-specific data (JSON format)')),
                ('user', models.ForeignKey(blank=True, help_text='User who performed the action (null for anonymous or deleted users)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Audit Log',
                'verbose_name_plural': 'Audit Logs',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['-timestamp', 'event_type'], name='starview_ap_timesta_06edc7_idx'), models.Index(fields=['user', '-timestamp'], name='starview_ap_user_id_d42b02_idx'), models.Index(fields=['ip_address', '-timestamp'], name='starview_ap_ip_addr_053191_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='location',
            index=models.Index(fields=['latitude', 'longitude'], name='location_coords_idx'),
        ),
        migrations.AddIndex(
            model_name='location',
            index=models.Index(fields=['country'], name='country_idx'),
        ),
        migrations.AddIndex(
            model_name='location',
            index=models.Index(fields=['created_at'], name='created_at_idx'),
        ),
        migrations.AddIndex(
            model_name='location',
            index=models.Index(fields=['added_by'], name='added_by_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='favoritelocation',
            unique_together={('user', 'location')},
        ),
        migrations.AddIndex(
            model_name='report',
            index=models.Index(fields=['content_type', 'object_id', 'status'], name='starview_ap_content_238e39_idx'),
        ),
        migrations.AddIndex(
            model_name='report',
            index=models.Index(fields=['reported_by', '-created_at'], name='starview_ap_reporte_d0eb4f_idx'),
        ),
        migrations.AddIndex(
            model_name='report',
            index=models.Index(fields=['status', '-created_at'], name='starview_ap_status_07f298_idx'),
        ),
        migrations.AddIndex(
            model_name='report',
            index=models.Index(fields=['report_type', '-created_at'], name='starview_ap_report__43cffa_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['rating'], name='review_rating_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['created_at'], name='review_created_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['location'], name='review_location_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['user'], name='review_user_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='review',
            unique_together={('user', 'location')},
        ),
        migrations.AddIndex(
            model_name='reviewphoto',
            index=models.Index(fields=['review', 'order'], name='starview_ap_review__b8d44e_idx'),
        ),
        migrations.AddIndex(
            model_name='reviewphoto',
            index=models.Index(fields=['created_at'], name='starview_ap_created_87dcb0_idx'),
        ),
        migrations.AddIndex(
            model_name='vote',
            index=models.Index(fields=['content_type', 'object_id'], name='starview_ap_content_b6271c_idx'),
        ),
        migrations.AddIndex(
            model_name='vote',
            index=models.Index(fields=['user', '-created_at'], name='starview_ap_user_id_924081_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='vote',
            unique_together={('user', 'content_type', 'object_id')},
        ),
    ]
